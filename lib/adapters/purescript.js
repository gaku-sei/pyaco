"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.save = void 0;
var fs_1 = __importDefault(require("fs"));
var path_1 = __importDefault(require("path"));
var fileName = "Tailwind.purs";
var generate = function (classes) {
    var purify = function (_a) {
        var className = _a.className, name = _a.name;
        return "\n" + name + " :: Tailwind\n" + name + " =\n  wrap \"" + className + "\"\n";
    };
    return "module Tailwind (\n  Tailwind,\n  make,\n" + classes.map(function (cl) { return "  " + cl.name; }).join(",\n") + "\n  ) where\n\n-- Generated by tailwind-generator, be careful when editing this file\n\n-- Examples:\n--\n-- Simple list of tailwind classes:\n--   [ rounded, borderRed100 ]\n--\n-- Add a class conditionally:\n--   [ if true then textBlue500 else textRed500 ]\n--\n-- Add a class only if a condition is met, do nothing otherwise:\n--   [ guard true textBlue500 ]\n--\n-- Handle Maybe, and other Foldable values:\n--   [ rounded, fold $ Nothing ]\n--   [ rounded, fold $ Right wFull ]\n--\n-- Build the class name string:\n--   make [ rounder, borderRed100 ]\n\nimport Data.Foldable (foldl)\nimport Data.Newtype (class Newtype, wrap)\nimport Prelude (class Eq, class Ord, class Semigroup, class Monoid, otherwise, (==), (<>))\n\nnewtype Tailwind\n  = Tailwind String\n\nderive instance newtypeTailwind :: Newtype Tailwind _\n\nderive instance eqTailwind :: Eq Tailwind\n\nderive instance ordTailwind :: Ord Tailwind\n\nderive newtype instance semigroupTailwind :: Semigroup Tailwind\n\nderive newtype instance monoidTailwind :: Monoid Tailwind\n\nmake :: Array Tailwind -> String\nmake =\n  foldl\n    ( \\acc (Tailwind className) -> case className of\n        \"\" -> acc\n        c\n          | acc == \"\" -> c\n          | otherwise -> acc <> \" \" <> c\n    )\n    \"\"\n" + classes.map(purify).join("") + "\n  ";
};
exports.save = function (dir, classes) {
    fs_1.default.writeFileSync(path_1.default.join(dir, fileName), generate(classes));
};
