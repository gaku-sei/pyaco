-- Generated by style-generator, be careful when editing this file

module Css (
  CssClass,
  make,
  {% for class in classes %}{{class|name}}{% if !loop.last %},{% endif %}
  {% endfor %}
  ) where

-- Examples:
--
-- Simple list of css classes:
--   [ rounded, borderRed100 ]
--
-- Add a class conditionally:
--   [ if true then textBlue500 else textRed500 ]
--
-- Add a class only if a condition is met, do nothing otherwise:
--   [ guard true textBlue500 ]
--
-- Handle Maybe, and other Foldable values:
--   [ rounded, fold $ Nothing ]
--   [ rounded, fold $ Right wFull ]
--
-- Build the class name string:
--   make [ rounder, borderRed100 ]

import Data.Foldable (foldl)
import Data.Newtype (class Newtype, wrap)
import Prelude (class Eq, class Ord, class Semigroup, class Monoid, otherwise, (==), (<>))

newtype CssClass
  = CssClass String

derive instance newtypeCssClass :: Newtype CssClass _

derive instance eqCssClass :: Eq CssClass

derive instance ordCssClass :: Ord CssClass

derive newtype instance semigroupCssClass :: Semigroup CssClass

derive newtype instance monoidCssClass :: Monoid CssClass

make :: Array CssClass -> String
make =
  foldl
    ( \acc (CssClass className) -> case className of
        "" -> acc
        c
          | acc == "" -> c
          | otherwise -> acc <> " " <> c
    )
    ""

{% for class in classes %}
{{class|name}} :: CssClass
{{class|name}} =
  wrap "{{class}}"

{% endfor %}
